package com.atguigu.java5;

/** 面向对象的特征之二：继承
 *   一、继承性的好处：
 *   1.减少了代码的冗余，提高了代码的复用性
 *   2.便于功能的扩展
 *   3.为之后多态性的使用，提供了前提
 *
 *
 *   二、继承性的格式： class A extends B{}
 *   A:子类，派生类
 *   B:父类，超类，基类
 *
 *  2.1 体现：一旦子类A继承了父类B以后，子类A中就获取了B中声明的所有属性和方法
 *          特别地，父类中声明为private 的属性和方法，子类继承父类以后，仍然认为
 *          获取了父类中私有的结构，只是因为封装性的影响，使得子类不能直接调用父类的结构而已
 *
 *   这里有两个概念：封装性和继承性。封装性解决的是我类中结构的可见性问题；继承性解决的是子类
 *   能不能获取到父类中的结构的问题；在Java的定义中，子类由于继承了父类，根据继承性是可以拿到
 *   父类中的属性和方法的，然而由于封装性无法调用到父类的属性和方法
 *
 *  2.2 子类继承父类以后，还可以声明自己特有的属性和方法 ：实现功能的扩展。
 *    三、Java中关于继承性的规定：
 *    1.一个类可以被多个子类继承
 *    2.Java中类的单继承性：一个类只能有一个父类
 *    3.子父类是相对的概念。
 *    4.子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类
 *    5.子类继承父类之后，就获取了直接父类以及所有间接父类中声明的属性和方法
 *    四、1.如果我们没有显式地声明一个类的父类的话，则此类继承于java.lang.Object类
 *        2.所有的java类都直接或间接继承于java.lang.Object
 */

public class ExtendsTest {
    public static void main(String[] args) {
        Person p1 = new Person();
        p1.age = 1;
        p1.eat();
        p1.sleep();
        System.out.println("---------------------");


        Student s1 = new Student();
        s1.eat();
        s1.sleep();
        s1.study();
        s1.name =  "Tom";
    }
}
